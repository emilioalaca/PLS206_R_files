{
    "contents" : "# we create 30 plots. We will assume for simplicity that we sample five individuals within each plot (equal sampling effort across plots). So set up an empty 5 x 30 array:\n  \nplot.spp <- array(dim=c(5,30)) # I changed the number of plots to be different from the number of species so there is less confusion.\n\n# Now lets assume that we have an overall species richness of 20 (we will just call them sp.a, sp.b, sp.c, etc…)\n\n(species <- paste(\"sp.\",c(letters[1:20]), sep=\"\")) #\n\n#================ procedure A to create vector of proportions ===========\n#We need to assign a probability of occurrence to each species, making sure the probabilities sum to one. So we simulate 20 probabilities:\n  \nprobs <- numeric(20) \nprobs[1:8] <- runif(8, 0, 0.1)\nfor(i in 9:19){\n  probs[i] <- runif(1, 0, 1-sum(probs[1:i-1]))\n}\nprobs[20] <- 1-sum(probs[1:19]) # Modified procedure to make sure it sums to 1.\n\n#The first line sets up an empty container vector. The second line randomly assigns the first 8 species a probability between 0 and 0.1 (this is to prevent any species from having a probability of 0.7 or higher and dominating all the plots because that would be boring). The for( ) loop makes sure each remaining species has a probability between 0 and one minus the sum of all other probabilities (constraining them to equal one). You can check the constraint:\n  \nsum(probs)\n\n# which should equal 1.\n\n# ==================== Procedure B to \"create\" 30 plots, each with five individuals randomly selected from the species list ====\n\n# Note that in reality the number of species and the probabilities will change from plot to plot, because we would expect some combinations of species to be more frequent than expected on the basis of the marginal probabilites. \n\n# Now for each plot (column) in our plot array, we want to sample five individuals randomly using the probabilities we just created (because the probability of picking any one species is equal to its overall probability).\n\nfor(i in 1:30){\n  plot.spp[,i] <- sample(species, size=5, replace=T, prob=probs)\n}\n\n# We sample with replacement to account for the possibility that species can occur multiple times within a plot. Essentially, this says the probability of an individual in a plot belonging to a given species is equal to the relative abundance or each species.\n\n# =================\n\n# Now we work on generating our random SAR curve. Let’s assume that we will randomly sample plots 20 times, and that we will increase the number of plots sampled (i.e. we will sample 1 plot 20 times, then 2 plots 20 times, then 3 plots 20 times, etc..). For each sampling event, we will calculate species richness.\n\n# We set up an empty 20 x 30 container (20 sampling events for 30 different plot numbers):\n  \nSAR.mat <- array(dim=c(20,30))\n\n# We use a nested for( ) loop to simulate the sampling:\n  \nfor(j in 1:30){\n  for(i in 1:20){\n    plot.index <- sample(1:30, j, replace=F)\n    SAR.plot <- c(plot.spp[,plot.index])\n    SAR.mat[i,j] <- length(unique(SAR.plot))\n  }\n}\n\n# The first loop tells the program to sample j plots going from 1 to 30. This is our ‘total plot area sampled’ going from 1 sq m to 30 sq m. The second loop is the sampling event, going from 1-20. plot.index is the index of sampled plots (i.e. randomly pull j plots from the 20 that we have). The length(unique( )) command just calculates the number of unique species i.e. species richness.\n\n# Now we have a 20 x 30 array containing 20 sampling events (rows) for each possible area (columns). Set up a vector relating the columns to areas, calculate the mean species richness of each column (area), calculate the 95% confidence interval, and then plot:\n  \nareas <- 1:20\nmeans <- apply(SAR.mat, MARGIN=2, mean)\nlower.95 <- apply(SAR.mat, MARGIN=2, function(x) quantile(x, 0.025))\nupper.95 <- apply(SAR.mat, MARGIN=2, function(x) quantile(x, 0.975))\npar(mar=c(4,4,1,1)+0.2)\nplot(areas, means, type='n', xlab=expression('Area '*(m^-2)),\n     ylab='Species Richness', cex.lab=1.2,\n     ylim=c(0,12))\npolygon(x=c(areas, rev(areas)),\n        y=c(lower.95, rev(upper.95)),\n        col='grey90')\nlines(areas, means, lwd=2)\n\n# Should look nice. If it doesn’t, rerun the above code in its entirety and you’ll get a different plot.\n\n# Now we want to fit a model to this. The common SAR model is\n\n\n\n# We can log transform each side to get the following model to fit with a linear regression:\n  \n# We can fit the model and then plot the curve\n\nSAR.mod <- lm(log(means) ~ log(areas))\nsummary(SAR.mod)\ncurve(exp(coef(SAR.mod)[1])*x^coef(SAR.mod)[2], add=T, from=0, to=20, col='red', lwd=2)\n\n# Unfortunately, the log-transformed model actually fits a model assuming multiplicative errors:\n# S=(cA^z)e\n  \n# The model we really want to fit is: S=(cA^z)+e\n\n# See Xiao et al (2011) in Ecology for a good description of the differences between the two models above and how they have been misused in allometric studies. We can fit the second model using a non-linear regression, using the log-linear model parameters as reasonable starting estimates. We then plot the nls( ) curve and tack on a legend.\n\nSAR.nls <- nls(means ~ a*areas^b,\n               start=list('a'=exp(coef(SAR.mod)[1]),\n                          'b'=coef(SAR.mod)[2]))\ncurve(coef(SAR.nls)[1]*x^coef(SAR.nls)[2], add=T, from=0, to=20, col='blue', lwd=2)\nlegend('topleft', lty=1, col=c('black', 'red', 'blue'),\n       legend=c('Median Species Richness', 'Linear Model Fit', 'Nonlinear Model Fit'),\n       cex=0.8,\n       bty='n')\n",
    "created" : 1353277326502.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4145485669",
    "id" : "FFB9FE70",
    "lastKnownWriteTime" : 1353281296,
    "path" : "~/Documents/TeachServ/CLASSES/AGR206/PLS206F10/RstudioPLS206/SAR.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}