{
    "contents" : "#http://www.ats.ucla.edu/stat/r/dae/zipoisson.htm. Accessed 2 Dec 2014.\n\nrequire(ggplot2)\nrequire(pscl)\nrequire(boot)\nzinb <- read.csv(\"http://www.ats.ucla.edu/stat/data/fish.csv\")\nzinb <- within(zinb, {\n  nofish <- factor(nofish)\n  livebait <- factor(livebait)\n  camper <- factor(camper)\n})\n\nsummary(zinb)\nggplot(zinb, aes(count)) + geom_histogram() + scale_x_log10()\nhist(zinb$count, breaks=40)\nplot(table(zinb$count))\n\nsummary(m1 <- zeroinfl(count ~ child + camper | persons, data = zinb))\nm2 <- zeroinfl(count ~ child + camper | 1, data = zinb)\nm3 <- zeroinfl(count ~ child + camper, data = zinb)\n# the formula specifies response ~ model for count | model for zero inflation\n\nmnull <- update(m1, . ~ 1)\nsummary(mnull)\npchisq(2 * (logLik(m1) - logLik(mnull)), df = 3, lower.tail = FALSE)\nsummary(p1 <- glm(count ~ child + camper, family = poisson, data = zinb))\nvuong(p1, m1)\nplot(residuals(m1, type=\"pearson\")~fitted(m1)) # Inspect Residuals\nplot(zinb$count~fitted(m1))\n\n#(bootstrapping gives better estimates of errors)\n\nnewdata1 <- expand.grid(0:3, factor(0:1), 1:4)\ncolnames(newdata1) <- c(\"child\", \"camper\", \"persons\")\nnewdata1 <- subset(newdata1, subset=(child<=persons))\nnewdata1$phat <- predict(m1, newdata1)\n\nggplot(newdata1, aes(x = child, y = phat, colour = factor(persons))) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~camper) +\n  labs(x = \"Number of Children\", y = \"Predicted Fish Caught\")\n\n#Take a look at the effect of persons on the probability of fishing\npi.parms <- coef(m1, model= \"zero\") # parameters of the linear predictor eta for pi\nzmat <- model.matrix(m1, model=\"zero\") # values of the predictors for data\ng <- zmat %*% pi.parms # predicted or fitted values of linear predictor for data\np.fishing <- exp(g)/(1 + exp(g)) # predicted probability that each group was fishing, based on the number of persons in the group.\n# more directly but less didactic (also into a different class):\np.fishing2 <- predict(m1, type=\"zero\")\nhead(p.fishing)\nhead(p.fishing2)\nclass(p.fishing)\nclass(p.fishing2)\n\n# Exercise: get the predictions for the count part of the model\n\nmu.parms <- coef(m1, model= \"count\") # parameters of the linear predictor eta for count\nzmat2 <- model.matrix(m1, model=\"count\") # values of the predictors for data\ng2 <- zmat2 %*% mu.parms # predicted or fitted values of linear predictor for data\nmu <- exp(g2) # predicted mean of Poisson for each group that was fishing \nmu2 <- predict(m1, typ=\"count\")\nhead(mu)\nhead(mu2)\nclass(mu)\nclass(mu2)\n\n# Predictions combining both zeros and counts\n\nexpected.count <- mu * (1-p.fishing)\nhead(expected.count)\nhead(predict(m1, type=\"response\"))\n",
    "created" : 1417710974108.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "829986912",
    "id" : "BF46C178",
    "lastKnownWriteTime" : 1417713889,
    "path" : "~/Google Drive/PLS206F13/RstudioPLS206/ZeroInflated.R",
    "project_path" : "ZeroInflated.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}